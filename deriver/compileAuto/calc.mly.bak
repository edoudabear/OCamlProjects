/* file: calc.mly */
/* Infix notatoin calculator -- calc */
%{
open Printf
%}
/* Ocamlyacc Declarations */
%token NEWLINE
%token L_PAREN R_PAREN
%token <float> NUM
%token PLUS MINUS MULTIPLY DIVIDE CARET QUOTIENT TEX_BRACE_OPEN TEX_BRACE_CLOSE
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left NEG /* negation -- unary minus */
%right CARET /* exponentiation */
%start input
%type <unit> input
/* Grammar follows */
/* Followed structure :
type operation = Mult | Sum | Diff | Quotient;;
type monome = (float*int);;
type pol = monome list;;
type expression = | Node of (operation*expression*expression) | Fonction of string*expression | Leaf of pol;;
type matrix=float array array;;
*/
%%
input: /* empty */ { }
| input line {  }
;
line: NEWLINE {  }
| exp NEWLINE { $1 }
;
exp: NUM { $1 }
| exp PLUS exp { Deriver.Node(Deriver.Sum,$1,$3) }
| exp MINUS exp { Deriver.Node(Deriver.Diff,$1,$3 }
| exp MULTIPLY exp { Deriver.Node(Deriver.Mult,$1,$3) }
| exp DIVIDE exp { Deriver.Node(Deriver.Quotient,$1,$3) }
| MINUS exp %prec NEG { Deriver.Node(Deriver.Diff,Leaf ([0.0,0]) ,$2) }
| exp CARET exp { Deriver.Fonction("exp",Deriver.Node(Deriver.Node(Deriver.Mult,$1,Deriver.Fonction("ln",$3))) }
| L_PAREN exp R_PAREN { $2 }
| QUOTIENT  TEX_BRACE_OPEN exp TEX_BRACE_CLOSE TEX_BRACE_OPEN  exp TEX_BRACE_CLOSE { Deriver.Node(Deriver.Quotient,$3,$6) }
;
%%
